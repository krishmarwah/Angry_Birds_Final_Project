plugins {
  id 'java'
  id 'application'
}

apply plugin: 'eclipse'

repositories {
  mavenCentral()
  jcenter()
}

dependencies {
  // LibGDX dependencies
  api "com.badlogicgames.ashley:ashley:$ashleyVersion"
  api "com.badlogicgames.box2dlights:box2dlights:$box2dlightsVersion"
  api "com.badlogicgames.gdx-controllers:gdx-controllers-core:$gdxControllersVersion"
  api "com.badlogicgames.gdx:gdx-ai:$aiVersion"
  api "com.badlogicgames.gdx:gdx-box2d:$gdxVersion"
  api "com.badlogicgames.gdx:gdx-bullet:$gdxVersion"
  api "com.badlogicgames.gdx:gdx-freetype:$gdxVersion"
  api "com.badlogicgames.gdx:gdx:$gdxVersion"

  // JUnit dependencies for testing (JUnit 5)
  testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
  testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
  testImplementation 'org.junit.vintage:junit-vintage-engine:5.8.2' // For backward compatibility with JUnit 4

  // Mockito for mocking
  testImplementation 'org.mockito:mockito-inline:4.0.0' // To mock final classes
  testImplementation 'org.mockito:mockito-core:4.0.0'
  testImplementation 'org.mockito:mockito-inline:4.8.1'  // or the latest version


  // PowerMockito dependencies for mocking constructors and static methods
  testImplementation 'org.powermock:powermock-api-mockito2:2.0.9'
  testImplementation 'org.powermock:powermock-module-junit4:2.0.9'

  // Conditional Graal native dependency
  if (enableGraalNative == 'true') {
    implementation "io.github.berstanio:gdx-svmhelper-annotations:$graalHelperVersion"
  }
}

test {
  useJUnitPlatform() // Use JUnit Platform for running tests (JUnit 5)
  testLogging {
    events 'passed', 'failed', 'skipped'
    exceptionFormat 'full'
  }
}

// Project name
eclipse.project.name = appName + '-core'

// Encoding settings
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
